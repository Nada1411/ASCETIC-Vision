install.packages("e1071")
help(package ="e1071")
n = c(2, 3, 5)
s = c("aa", "bb", "cc", "dd", "ee”)
x = list(n, s, TRUE)
s = c("aa", "bb", "cc", "dd", "ee”)
x=list(n,s,TRUE)
s = c("aa", "bb", "cc", "dd", "ee”)
n
s
s=c("aa","bb","cc","dd","ee")
x=list(n,s,TRUE)
X
std_id = c (1:5)
std_name = c("Rick","Dan","Michelle","Ryan","Gary")
marks = c(623.3,515.2,611.0,729.0,843.25)
std.data <- data.frame(std_id, std_name, marks)
std.data
setwd("~/")
dim(iris)
levels(iris$Species)
x =[, 1:4]
x =iris[, 1:4]
y =iris[,5]
par(mfrow=c(1,4))
for(i in 1:4) {
boxplot(x[,i], main=names(iris)[i])
}
library(caret)
install.packages("caret")
install.packages('caret', dependencies = TRUEù)
install.packages('caret', dependencies = TRUE)
library(caret)
featurePlot(x, y, plot="density", scales=list(x=list(relation="free"),
y=list(relation="free")), auto.key=list(columns=3))
plot(y,col=c(4,6,3))
featurePlot(x=x, y=y, plot="pairs", auto.key=list(columns=3))
plot(y,col=c(4,6,3)
plot(y,col=c(4,6,3))
plot(y,col=c(4,6,8))
plot(y,col=c(4,6,3))
featurePlot(x=x, y=y, plot="pairs", auto.key=list(columns=3))
install.packages("shiny")
shiny::runApp('C:/Users/nada2/Desktop/shiny_App')
shiny::runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
shiny::runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
BiocManager::install("ASCETIC")
install_github("danro9685/ASCETIC", ref = 'master')
data(modelsPhylogenies)
resExampleSingleSamples <- asceticCCF(
dataset = datasetExampleSingleSamples,
ccfDataset = ccfDatasetExampleSingleSamples,
regularization = "aic",
command = "hc",
restarts = 0 )
resExampleSingleSamples <- asceticCCF(
dataset = datasetExampleSingleSamples,
ccfDataset = ccfDatasetExampleSingleSamples,
regularization = "aic",
command = "hc",
restarts = 0 )
source("utils.r")
resExampleSingleSamples <- asceticCCF(
dataset = datasetExampleSingleSamples,
ccfDataset = ccfDatasetExampleSingleSamples,
regularization = "aic",
command = "hc",
restarts = 0 )
source("ascetic.r")
shiny::runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
resExampleSingleSamples <- asceticCCF(
dataset = datasetExampleSingleSamples,
ccfDataset = ccfDatasetExampleSingleSamples,
regularization = "aic",
command = "hc",
restarts = 0 )
data(ccfDatasetExampleSingleSamples)
data(datasetExampleSingleSamples)
resExampleSingleSamples <- asceticCCF(
dataset = datasetExampleSingleSamples,
ccfDataset = ccfDatasetExampleSingleSamples,
regularization = "aic",
command = "hc",
restarts = 0 )
load(datasetExampleSingleSamples)
load("datasetExampleSingleSamples")
load("./datasetExampleSingleSamples")
resExampleSingleSamples <- asceticCCF(
dataset = datasetExampleSingleSamples,
ccfDataset = ccfDatasetExampleSingleSamples,
regularization = "aic",
command = "hc",
restarts = 0 )
source("ascetic.r")
resExampleSingleSamples <- asceticCCF(
dataset = datasetExampleSingleSamples,
ccfDataset = ccfDatasetExampleSingleSamples,
regularization = "aic",
command = "hc",
restarts = 0 )
load("datasetExampleSingleSamples.RData")
source("./utils.R")
load("./datasetExampleSingleSamples.RData")
load("./datasetExampleSingleSamples.RData")
load("./datasetExampleSingleSamples.RData")
load("./datasetExampleSingleSamples.RData")
load("./datasetExampleSingleSamples.RData")
load("./datasetExampleSingleSamples.RData")
load("C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0/datasetExampleSingleSamples.RData")
source("./ascetic.R")
load("C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0/ccfDatasetExampleSingleSamples.RData")
load("C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0/datasetExamplePhylogenies.RData")
load("C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0/modelsPhylogenies.RData")
load("C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0/vafDatasetExampleSingleSamples.RData")
set.seed(12345)
source("ASCETIC.r")
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
resExampleSingleSamples <- asceticCCF(
resExampleSingleSamples <- asceticCCF(
dataset = datasetExampleSingleSamples,
ccfDataset = ccfDatasetExampleSingleSamples,
regularization = "aic",
command = "hc",
restarts = 0 )
set.seed(12345)
set.seed(12345)
resExampleSingleSamples <- asceticCCF(
dataset = datasetExampleSingleSamples,
ccfDataset = ccfDatasetExampleSingleSamples,
regularization = "aic",
command = "hc",
restarts = 0 )
library("ASCETIC")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ASCETIC")
set.seed(12345)
resExampleSingleSamples <- asceticCCF(
dataset = datasetExampleSingleSamples,
ccfDataset = ccfDatasetExampleSingleSamples,
regularization = "aic",
command = "hc",
restarts = 0 )
library("ASCETIC")
set.seed(12345)
resExampleSingleSamples <- asceticCCF(
dataset = datasetExampleSingleSamples,
ccfDataset = ccfDatasetExampleSingleSamples,
regularization = "aic",
command = "hc",
restarts = 0 )
source("RcppExports.R")
set.seed(12345)
resExampleSingleSamples <- asceticCCF(
dataset = datasetExampleSingleSamples,
ccfDataset = ccfDatasetExampleSingleSamples,
regularization = "aic",
command = "hc",
restarts = 0 )
source("evosigs.R")
set.seed(12345)
resExampleSingleSamples <- asceticCCF(
dataset = datasetExampleSingleSamples,
ccfDataset = ccfDatasetExampleSingleSamples,
regularization = "aic",
command = "hc",
restarts = 0 )
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
shiny::runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
shiny::runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
shiny::runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
install.packages("rlang", dependencies=TRUE)
install.packages("rlang", dependencies = TRUE)
shiny::runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
shiny::runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
shiny::runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
View(ccfDatasetExampleSingleSamples)
View(ccfDatasetExampleSingleSamples)
View(asceticCCF)
View(asceticCCF)
View(agony)
View(agony)
View(evoSigs)
View(evoSigs)
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
View(asceticCCF)
View(asceticCCF)
View(asceticCCF)
View(asceticCCF)
View(agony)
View(agony)
View(evoSigs)
View(evoSigs)
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
View(asceticCCF)
View(asceticCCF)
performLikelihoodFit
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
View(asceticPhylogenies)
View(asceticPhylogenies)
shiny::runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
function(dataset,
ccfDataset,
regularization = c("aic", "bic"),
command = "hc",
restarts = 10) {
# estimate the probability raising models
prModel <- .estimatePrModelSingleSamples(ccfDataset)
prNull <- .estimatePrNull(dataset)
# compute the agony based poset
# First: assess temporal priority with minimum agony
agonyPoset <- .estimateAgonyPosetSingleSamples(ccfDataset)
# Second: verify probability raising
agonyPoset <- .applyPr(agonyPoset, prModel, prNull)
# perform the inference
#agonyInference <- list()
#for (reg in regularization) {
#  agonyInference[[reg]] <- .performLikelihoodFit(dataset, agonyPoset, reg, command, restarts)
#}
agonyInference <- setNames(
lapply(regularization, function(reg) {
result <- .performLikelihoodFit(dataset, agonyPoset, reg, command, restarts)
rownames(result) <- colnames(result) <- as.character(seq_len(ncol(dataset)))
return(result)
}),
regularization
)
# create the data structures with the posets and the inference results
rownames(agonyPoset) <- as.character(seq_len(ncol(dataset)))
colnames(agonyPoset) <- as.character(seq_len(ncol(dataset)))
poset <- agonyPoset
#for (i in regularization) {
#  rownames(agonyInference[[i]]) <- as.character(seq_len(ncol(dataset)))
#  colnames(agonyInference[[i]]) <- as.character(seq_len(ncol(dataset)))
#}
# create the data structures with the results
results <-
list(
dataset = dataset,
ccfDataset = ccfDataset,
poset = poset,
inference = agonyInference
)
return(results)
}
prNull <- .estimatePrNull(dataset)
# compute the agony based poset
# First: assess temporal priority with minimum agony
agonyPoset <- .estimateAgonyPosetSingleSamples(ccfDataset)
View(datasetExamplePhylogenies)
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
View(asceticPhylogenies)
View(asceticPhylogenies)
runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
View(asceticCCF)
View(asceticCCF)
load("C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0/ccfDataset.RData")
load("C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0/dataset.RData")
load("C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0/dataset.RData")
load("C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0/dataset.RData")
load("C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0/dataset.RData")
function(dataset,
ccfDataset,
regularization = c("aic", "bic"),
command = "hc",
restarts = 10) {
# estimate the probability raising models
prModel <- .estimatePrModelSingleSamples(ccfDataset)
prNull <- .estimatePrNull(dataset)
# compute the agony based poset
# First: assess temporal priority with minimum agony
agonyPoset <- .estimateAgonyPosetSingleSamples(ccfDataset)
# Second: verify probability raising
agonyPoset <- .applyPr(agonyPoset, prModel, prNull)
# perform the inference
#agonyInference <- list()
#for (reg in regularization) {
#  agonyInference[[reg]] <- .performLikelihoodFit(dataset, agonyPoset, reg, command, restarts)
#}
agonyInference <- setNames(
lapply(regularization, function(reg) {
result <- .performLikelihoodFit(dataset, agonyPoset, reg, command, restarts)
rownames(result) <- colnames(result) <- as.character(seq_len(ncol(dataset)))
return(result)
}),
regularization
)
# create the data structures with the posets and the inference results
rownames(agonyPoset) <- as.character(seq_len(ncol(dataset)))
colnames(agonyPoset) <- as.character(seq_len(ncol(dataset)))
poset <- agonyPoset
#for (i in regularization) {
#  rownames(agonyInference[[i]]) <- as.character(seq_len(ncol(dataset)))
#  colnames(agonyInference[[i]]) <- as.character(seq_len(ncol(dataset)))
#}
# create the data structures with the results
results <-
list(
dataset = dataset,
ccfDataset = ccfDataset,
poset = poset,
inference = agonyInference
)
return(results)
}
# create the data structures with the results
results <-
list(
dataset = dataset,
ccfDataset = ccfDataset,
poset = poset,
inference = agonyInference
)
View(modelsPhylogenies)
View(modelsPhylogenies)
load("C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0/dataset.RData")
load("C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0/dataset.RData")
#for (reg in regularization) {
agonyInference <- setNames(
lapply(regularization, function(reg) {
result <- .performLikelihoodFit(dataset, agonyPoset, reg, command, restarts)
rownames(result) <- colnames(result) <- as.character(seq_len(ncol(dataset)))
return(result)
}),
regularization
)
agonyInference <- setNames(
lapply(regularization, function(reg) {
result <- .performLikelihoodFit(dataset, agonyPoset, reg, command, restarts)
rownames(result) <- colnames(result) <- as.character(seq_len(ncol(dataset)))
return(result)
}),
regularization
)
View(asceticCCF)
View(asceticCCF)
View(agony)
View(agony)
View(evoSigs)
View(evoSigs)
View(agony)
View(agony)
shiny::runApp('C:/Users/nada2/Desktop/ascetic2/ASCETIC_2.0')
